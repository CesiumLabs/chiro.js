{"meta":{"generator":"0.9.0","format":20,"date":1628052689650},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://chirojs.openian.dev\"><img src=\"https://menhera-chan.in/img/Chiro.JS.svg\" width=\"546\" alt=\"discord.js\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://menhera-chan.in/support\"><img src=\"https://img.shields.io/discord/735899211677041099?color=5865F2&logo=discord&logoColor=white\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/chiro.js\"><img src=\"https://img.shields.io/npm/v/chiro.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/chiro.js\"><img src=\"https://img.shields.io/npm/dt/chiro.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://www.patreon.com/rohank05\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n</div>\n\n## About\n\nChiro.js is a powerful [Node.js](https://nodejs.org) module that allows you to easily interact with the\n[Nexus](https://github.com/DevSnowflake/Nexus). Chiro.js is highly inspired from [Erela.JS](https://github.com/MenuDocs/erela.js) which is a module for lavalink.\n\n\n## Installation\n\n**Node.js 14.0.0 or newer is required.**  \n\n```sh-session\nnpm install chiro.js\n```\n\n## Example usage\n\n```js\nconst Discord = require(\"discord.js\");\nconst Chiro = require(\"chiro.js\");\nconst client = new Discord.Client();\nconst manager = new Chiro.Manager({    \n    nodes: [{ host: \"localhost\", port: 3000, password: \"SwagLordNitroUser12345\", secure: true }],\n    onData(id, payload) {\n        const guild = client.guilds.cache.get(id);\n        if (guild) guild.shard.send(payload);\n    },\n});\n\nmanager.on(\"ready\", () => {\n    console.log(\"Chiro manager is ready.\");\n});\n\nmanager.on(\"trackStart\", (player, track) => {\n    console.log(`${track.title} has started playing!`);\n});\n\nmanager.on(\"error\", console.log);\n\nclient.on(\"ready\", () => {\n    manager.init(client.user.id);\n    console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on(\"message\", async (message) => {\n    if (message.content === \"play\") {\n        const player = await manager.createPlayer({\n            guild: message.guild.id,\n            textChannel: message.channel.id,\n            voiceChannel: message.member.voice.channel.id,\n        });\n\n        const response = await player.search({ query: \"play that funky music\" });\n        player.queue.add(response.tracks[0]);\n        await player.play();\n    }\n});\n\nclient.on('raw', manager.updateVoiceState.bind(manager));\n\nclient.login(\"token\");\n```\n\n## Links\n\n- [Website](https://chirojs.openian.dev/)\n- [Documentation](https://chirojs.openian.dev/)\n- [Discord server](https://menhera-chan.in/support)\n- [Nexus Discord server](https://snowflakedev.org/discord)\n- [GitHub](https://github.com/DevSnowflake/chiro.js)\n- [NPM](https://www.npmjs.com/package/chiro.js)\n\n## Help\n\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction kindly create an github issue or join our official [Chiro.js Support Server](https://snowflakedev.org/discord).","path":"README.md"}}}},"classes":[{"name":"ChiroError","construct":{"name":"ChiroError","description":"<p>Creates an ChiroError instance.</p>","params":[{"name":"content","description":"<p>The content of the error.</p>","type":[[["string"]]]}]},"meta":{"line":16,"file":"Error.ts","path":"src/structures"}},{"name":"ChiroEventError","construct":{"name":"ChiroEventError","description":"<p>Creates a chiro event error instance for debugging.</p>","params":[{"name":"kind","description":"<p>The event error kind.</p>","type":[[["ChiroEventError"]]]},{"name":"error","description":"<p>The error payload received from the ws api.</p>","type":[[["Payload"]],[["Error"]]]},{"name":"player","description":"<p>The player where the error was caught.</p>","type":[[["Player"]]]}]},"meta":{"line":27,"file":"Error.ts","path":"src/structures"}},{"name":"Manager","description":"<p>The Manager Class which manages all the players.</p>","extends":[[["EventEmitter"]]],"construct":{"name":"Manager","description":"<p>Creates new Manager Instance</p>","params":[{"name":"options","description":"<p>The options which are necessary for the Manager.</p>","type":[[["ManagerOptions"]]]}]},"props":[{"name":"players","description":"<p>The Collection of Players in this Manager.</p>","type":[[["Collection","<"],["Snowflake",", "],["Player",">"]]],"meta":{"line":116,"file":"Manager.ts","path":"src/structures"}},{"name":"clientID","description":"<p>The client id of the bot which is been managed.</p>","type":[[["Snowflake"]]],"meta":{"line":123,"file":"Manager.ts","path":"src/structures"}},{"name":"nodes","description":"<p>The Nodes of the manager.</p>","type":[[["Collection","<"],["number",", "],["Node",">"]]],"meta":{"line":130,"file":"Manager.ts","path":"src/structures"}},{"name":"options","description":"<p>The options received from the constructor for the Manager.</p>","type":[[["ManagerOptions"]]],"meta":{"line":137,"file":"Manager.ts","path":"src/structures"}},{"name":"initiated","description":"<p>Boolean stating is the Manager Class initiated or not.</p>","access":"private","type":[[["boolean"]]],"meta":{"line":144,"file":"Manager.ts","path":"src/structures"}},{"name":"accessToken","description":"<p>Nexus Access Token for the REST API calls.</p>","type":[[["string"]]],"meta":{"line":152,"file":"Manager.ts","path":"src/structures"}},{"name":"node","description":"<p>Returns a node with less resources consumed</p>","type":[[["Node"]]],"meta":{"line":267,"file":"Manager.ts","path":"src/structures"}}],"methods":[{"name":"init","description":"<p>Initiate the manager.</p>","examples":["manager.init(client.user.id);"],"params":[{"name":"clientID","description":"<p>Bot Application ID</p>","type":[[["Snowflake"]]]}],"returns":[[["Manager"]]],"meta":{"line":189,"file":"Manager.ts","path":"src/structures"}},{"name":"search","description":"<p>Search youtube for songs and playlists.</p>","examples":["const results = await manager.search({ query: \"Play that funky music\" }, message.author);\nconsole.log(results);"],"params":[{"name":"searchQuery","description":"<p>The query object.</p>","type":[[["SearchQuery"]]]},{"name":"requestor","description":"<p>The id of the user who requested it.</p>","type":[[["Snowflake"]]]}],"async":true,"returns":[[["SearchResult"]]],"meta":{"line":210,"file":"Manager.ts","path":"src/structures"}},{"name":"createPlayer","description":"<p>Creates a new player instance and add it to players collection.</p>","params":[{"name":"options","description":"<p>Player Options to create one, if there is no existing one.</p>","type":[[["PlayerOptions"]]]}],"async":true,"returns":[[["Promise","<"],["Player",">"]]],"meta":{"line":226,"file":"Manager.ts","path":"src/structures"}},{"name":"get","description":"<p>Get a player by its guild id.</p>","params":[{"name":"guild","description":"<p>ID of Guild.</p>","type":[[["Snowflake"]]]}],"returns":{"types":[[["Player"]]],"nullable":true},"meta":{"line":241,"file":"Manager.ts","path":"src/structures"}},{"name":"destroyNode","description":"<p>Destroy all the Node connection.</p>","meta":{"line":250,"file":"Manager.ts","path":"src/structures"}},{"name":"updateVoiceState","description":"<p>Send Voice State Payload Received from Discord API to Nexus.</p>","examples":["client.on('raw', manager.updateVoiceState.bind(manager));"],"params":[{"name":"data","description":"<p>The data from the event.</p>","type":[[["Object"]]]}],"meta":{"line":257,"file":"Manager.ts","path":"src/structures"}}],"meta":{"line":104,"file":"Manager.ts","path":"src/structures"}},{"name":"Node","description":"<p>The Node class which does the api management.</p>","construct":{"name":"Node","description":"<p>The constructor for the node.</p>","params":[{"name":"options","description":"<p>The options required for the Node.</p>","type":[[["NodeOptions"]]]},{"name":"manager","description":"<p>The manager for this node.</p>","type":[[["Manager"]]]}]},"props":[{"name":"socket","description":"<p>Websocket of the node.</p>","type":[[["WebSocket"]],[["null"]]],"meta":{"line":14,"file":"Node.ts","path":"src/structures"}},{"name":"baseURL","description":"<p>The base url where the node fetches.</p>","type":[[["string"]]],"meta":{"line":21,"file":"Node.ts","path":"src/structures"}},{"name":"reconnectAttempts","description":"<p>Number of reconnect attempts.</p>","access":"private","type":[[["number"]]],"meta":{"line":64,"file":"Node.ts","path":"src/structures"}},{"name":"connected","description":"<p>Returns a boolean stating is the socket connected or not.</p>","type":[[["boolean"]]],"meta":{"line":97,"file":"Node.ts","path":"src/structures"}}],"methods":[{"name":"connect","description":"<p>Creates a WS connection with the Websocket API.</p>","meta":{"line":105,"file":"Node.ts","path":"src/structures"}},{"name":"destroy","description":"<p>Destroys the Node and all players connected with it.</p>","meta":{"line":123,"file":"Node.ts","path":"src/structures"}},{"name":"makeRequest","description":"<p>Make a request to the Nexus Api.</p>","params":[{"name":"method","description":"<p>The type of api request to be done.</p>","type":[[["string"]]]},{"name":"path","description":"<p>The api url's path.</p>","type":[[["string"]]]},{"name":"body","description":"<p>The body of the request.</p>","type":[[["Object"]]]}],"async":true,"returns":[[["Promise","<"],["Response",">"]]],"meta":{"line":144,"file":"Node.ts","path":"src/structures"}},{"name":"reconnect","description":"<p>Reconnect in to the Websocket if the connection fails.</p>","access":"private","meta":{"line":165,"file":"Node.ts","path":"src/structures"}},{"name":"open","description":"<p>Open event for the websocket api.</p>","access":"protected","meta":{"line":186,"file":"Node.ts","path":"src/structures"}},{"name":"close","description":"<p>Close event for the websocket api.</p>","access":"protected","params":[{"name":"code","description":"<p>Close code from the ws api.</p>","type":[[["number"]]]},{"name":"reason","description":"<p>Reason for the closinf the ws connection.</p>","type":[[["string"]]]}],"meta":{"line":195,"file":"Node.ts","path":"src/structures"}},{"name":"error","description":"<p>Error event for the websocket api.</p>","access":"protected","params":[{"name":"error","description":"<p>Error from the socket.</p>","type":[[["Error"]]]}],"meta":{"line":206,"file":"Node.ts","path":"src/structures"}},{"name":"message","description":"<p>Message event from the websocket api.</p>","access":"protected","params":[{"name":"d","description":"<p>Data Buffer from the api.</p>","type":[[["Buffer"]],[["string"]]]}],"meta":{"line":216,"file":"Node.ts","path":"src/structures"}},{"name":"handleTrackEvent","description":"<p>Handle all kind of track events.</p>","access":"protected","params":[{"name":"payload","description":"<p>Payload from the websocket api.</p>","type":[[["Payload"]]]}],"meta":{"line":280,"file":"Node.ts","path":"src/structures"}},{"name":"trackEnd","description":"<p>Emit event for the TRACK_END event.</p>","access":"protected","params":[{"name":"player","description":"<p>The player.</p>","type":[[["Player"]]]},{"name":"track","description":"<p>The data of the track.</p>","type":[[["TrackData"]]]},{"name":"payload","description":"<p>The payload from the ws api.</p>","type":[[["Payload"]]]}],"meta":{"line":310,"file":"Node.ts","path":"src/structures"}},{"name":"queueEnd","description":"<p>Emits the <code>queueEnd</code> event in the Manager.</p>","access":"protected","params":[{"name":"player","description":"<p>The player.</p>","type":[[["Player"]]]},{"name":"payload","description":"<p>The payload sent by the ws api.</p>","type":[[["Payload"]]]}],"meta":{"line":339,"file":"Node.ts","path":"src/structures"}},{"name":"updatePlayerData","description":"<p>Update the player's data.</p>","access":"protected","params":[{"name":"player","description":"<p>The player.</p>","type":[[["Player"]]]},{"name":"payload","description":"<p>The payload data to be sent while updating.</p>","type":[[["Payload"]]]}],"meta":{"line":349,"file":"Node.ts","path":"src/structures"}},{"name":"send","description":"<p>Send payload data to the nexus using ws.</p>","examples":["const payload = {\"op\": 10, d: null}\n<Player>.node.send(payload)"],"params":[{"name":"data","description":"<p>Payload to send to WS</p>","type":[[["Object"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":361,"file":"Node.ts","path":"src/structures"}}],"meta":{"line":10,"file":"Node.ts","path":"src/structures"}},{"name":"Player","description":"<p>The Player Class</p>","construct":{"name":"Player","description":"<p>Creates a new player instance.</p>","params":[{"name":"options","description":"<p>The options nexessary for the player.</p>","type":[[["PlayerOptions"]]]},{"name":"manager","description":"<p>The manager for the player.</p>","type":[[["Manager"]]]}]},"props":[{"name":"queue","description":"<p>Queue for the player.</p>","type":[[["Queue"]]],"meta":{"line":12,"file":"Player.ts","path":"src/structures"}},{"name":"trackRepeat","description":"<p>Boolean stating to repeat the track or not.</p>","type":[[["boolean"]]],"meta":{"line":19,"file":"Player.ts","path":"src/structures"}},{"name":"queueRepeat","description":"<p>Boolean stating to repeat the queue or not.</p>","type":[[["boolean"]]],"meta":{"line":26,"file":"Player.ts","path":"src/structures"}},{"name":"playing","description":"<p>Boolean stating is the player playing or not.</p>","type":[[["boolean"]]],"meta":{"line":33,"file":"Player.ts","path":"src/structures"}},{"name":"volume","description":"<p>The volume of the player.</p>","type":[[["number"]]],"meta":{"line":40,"file":"Player.ts","path":"src/structures"}},{"name":"voiceChannel","description":"<p>The voice channel.</p>","type":[[["string"]],[["null"]]],"meta":{"line":61,"file":"Player.ts","path":"src/structures"}},{"name":"textChannel","description":"<p>The text channel for the player.</p>","type":[[["string"]],[["null"]]],"meta":{"line":68,"file":"Player.ts","path":"src/structures"}},{"name":"state","description":"<p>The current state of the player.\nidle - Not connected yet.\nconnected - Connected to the player.\ndisconnected - Was connected to the player.\nconnecting - Connecting to the player.</p>","type":[[["string"]]],"meta":{"line":75,"file":"Player.ts","path":"src/structures"}},{"name":"connected","description":"<p>Boolean stating is the player connected or not.</p>","readonly":true,"type":[[["boolean"]]],"meta":{"line":101,"file":"Player.ts","path":"src/structures"}},{"name":"paused","description":"<p>Boolean stating is the player paused or not.</p>","readonly":true,"type":[[["boolean"]]],"meta":{"line":110,"file":"Player.ts","path":"src/structures"}}],"methods":[{"name":"search","description":"<p>Search youtube for songs and playlists.</p>","examples":["const results = await player.search({ query: \"Play that funky music\" }, message.author);\nconsole.log(results);"],"params":[{"name":"searchQuery","description":"<p>The search query options object.</p>","type":[[["SearchQuery"]]]},{"name":"requestor","description":"<p>The id of the user who requested it.</p>","type":[[["Snowflake"]]]}],"returns":[[["SearchResult"]]],"meta":{"line":119,"file":"Player.ts","path":"src/structures"}},{"name":"connect","description":"<p>Create a voice channel Subscription to nexus.</p>","params":[{"name":"volume","description":"<p>The volume the player should connect with.</p>","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Player",">"]]],"meta":{"line":132,"file":"Player.ts","path":"src/structures"}},{"name":"disconnect","description":"<p>Disconnects the voice channel.</p>","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":145,"file":"Player.ts","path":"src/structures"}},{"name":"play","description":"<p>Play the songs added in the queue.</p>","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":157,"file":"Player.ts","path":"src/structures"}},{"name":"sendPlayPost","description":"<p>Send POST request to NEXUS to play the song.</p>","access":"private","params":[{"name":"track","description":"<p>Track to Play the song</p>","type":[[["TrackData"]]]}],"async":true,"meta":{"line":167,"file":"Player.ts","path":"src/structures"}},{"name":"applyFilters","description":"<p>Apply filters through the Nexus API.</p>","params":[{"name":"filter","description":"<p>Music Filter to Apply</p>","type":[[["Filters"]]]}],"meta":{"line":178,"file":"Player.ts","path":"src/structures"}},{"name":"setVolume","description":"<p>Set the volume of the player.</p>","params":[{"name":"volume","description":"<p>Volume to set.</p>","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":188,"file":"Player.ts","path":"src/structures"}},{"name":"destroy","description":"<p>Destroy the player.</p>","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":198,"file":"Player.ts","path":"src/structures"}},{"name":"stop","description":"<p>Clear the queue and stop the player.</p>","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":209,"file":"Player.ts","path":"src/structures"}},{"name":"skip","description":"<p>Skip the current playing song.</p>","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":222,"file":"Player.ts","path":"src/structures"}},{"name":"pause","description":"<p>Pause the player.</p>","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":230,"file":"Player.ts","path":"src/structures"}},{"name":"resume","description":"<p>Resume the player.</p>","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":240,"file":"Player.ts","path":"src/structures"}}],"meta":{"line":8,"file":"Player.ts","path":"src/structures"}},{"name":"Queue","description":"<p>The Queue Structure for the Player.</p>","props":[{"name":"current","description":"<p>Current playing track.</p>","type":[[["TrackData"]]],"meta":{"line":7,"file":"Queue.ts","path":"src/structures"}},{"name":"previous","description":"<p>Last played track.</p>","type":[[["TrackData"]]],"meta":{"line":21,"file":"Queue.ts","path":"src/structures"}}],"methods":[{"name":"add","description":"<p>Add songs to the queue.</p>","params":[{"name":"track","description":"<p>Track to add to queue</p>","type":[[["TrackData"]],[["Array","<"],["TrackData",">"]]]}],"meta":{"line":18,"file":"Queue.ts","path":"src/structures"}},{"name":"clear","description":"<p>Clear the queue.</p>","meta":{"line":31,"file":"Queue.ts","path":"src/structures"}},{"name":"shuffle","description":"<p>Shuffle the queue.</p>","meta":{"line":38,"file":"Queue.ts","path":"src/structures"}}],"meta":{"line":3,"file":"Queue.ts","path":"src/structures"}},{"name":"Util","description":"<p>Utility methods holder</p>","methods":[{"name":"resolveTracks","description":"<p>Internal Method to Resolve Search Result from nexus into Interface SearchResult</p>","scope":"static","params":[{"name":"results","description":"<p>Search results from the api.</p>","type":[[["Object"]]]},{"name":"requestor","description":"<p>The user who requested it.</p>","type":[[["Snowflake"]]]}],"returns":[[["SearchResult"]]],"meta":{"line":9,"file":"Utils.ts","path":"src/structures"}},{"name":"encapsulateTrackData","description":"<p>Internal method to encapsulate Track Data received from Nexus into {TrackData}</p>","scope":"static","params":[{"name":"data","description":"<p>The Track details received from Nexus.</p>","type":[[["TrackData"]]]},{"name":"requestor","description":"<p>The id of the person who requested it.</p>","type":[[["Snowflake"]]]}],"returns":[[["TrackData"]]],"meta":{"line":34,"file":"Utils.ts","path":"src/structures"}}],"meta":{"line":3,"file":"Utils.ts","path":"src/structures"}}],"interfaces":[],"typedefs":[{"name":"ManagerOptions","type":[[["Object"]]],"params":[{"name":"node","description":"<p>Node Options</p>","optional":true,"type":[[["NodeOptions"]]]},{"name":"clientID","description":"<p>Bot Application ID</p>","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":277,"file":"Manager.ts","path":"src/structures"}},{"name":"Snowflake","description":"<p>A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z</p>\n<pre class=\"prettyprint source\"><code>If we have a snowflake '266241948824764416' we can represent it as binary:\n\n64                                          22     17     12          0\n 000000111011000111100001101001000101000000  00001  00000  000000000000\n      number of ms since Discord epoch       worker  pid    increment\n</code></pre>","type":[[["string"]]],"meta":{"line":283,"file":"Manager.ts","path":"src/structures"}},{"name":"SearchQuery","type":[[["Object"]]],"params":[{"name":"identifier","description":"<p>IDentifier of type of query</p>","default":"'ytsearch'","type":[[["string"]]]},{"name":"query","description":"<p>Query to be searched for</p>","type":[[["string"]]]}],"meta":{"line":295,"file":"Manager.ts","path":"src/structures"}},{"name":"SearchResult","type":[[["Object"]]],"params":[{"name":"type","description":"<p>Type Of Search Result</p>","type":[[["SEARCH_RESULT"]],[["PLAYLIST"]],[["NO_RESULT"]]]},{"name":"playlist","description":"<p>Playlist info</p>","optional":true,"type":[[["PlaylistInfo"]]]},{"name":"Array","description":"<p>of Tracks</p>","type":[[["Array","<"],["TrackData",">"]]]},{"name":"requestor","description":"<p>User who requested it</p>","type":[[["Snowflake"]]]}],"meta":{"line":301,"file":"Manager.ts","path":"src/structures"}},{"name":"PlaylistInfo","type":[[["Object"]]],"params":[{"name":"id","description":"<p>ID Of Playlist</p>","type":[[["string"]]]},{"name":"title","description":"<p>Title of Playlist</p>","type":[[["string"]]]},{"name":"url","description":"<p>URL of Playlist</p>","type":[[["string"]]]},{"name":"author","description":"<p>Uploader of the playlist</p>","type":[[["string"]]]},{"name":"extractor","description":"<p>Website playlist is fetched from</p>","type":[[["string"]]]}],"meta":{"line":309,"file":"Manager.ts","path":"src/structures"}},{"name":"TrackData","type":[[["Object"]]],"params":[{"name":"url","description":"<p>URL of the Track</p>","type":[[["string"]]]},{"name":"title","description":"<p>Title of the Track</p>","type":[[["string"]]]},{"name":"thumbnail","description":"<p>Image of the Track</p>","type":[[["string"]]]},{"name":"duration","description":"<p>Duration of the Track</p>","type":[[["number"]]]},{"name":"author","description":"<p>Uploader of the Track</p>","type":[[["string"]]]},{"name":"created_at","description":"<p>Track upload date</p>","type":[[["Date"]]]},{"name":"extractor","description":"<p>Website track is fetched from</p>","type":[[["string"]]]},{"name":"requestedBy","description":"<p>User who requested it</p>","type":[[["Snowflake"]]]},{"name":"streamTime","description":"<p>Current seek of playing track</p>","default":0,"type":[[["number"]]]}],"meta":{"line":318,"file":"Manager.ts","path":"src/structures"}},{"name":"NodeOptions","type":[[["Object"]]],"params":[{"name":"host","description":"<p>Hostname of Nexus Node</p>","default":"'localhost'","type":[[["string"]]]},{"name":"port","description":"<p>Port of Nexus</p>","default":"'3000'","type":[[["number"]]]},{"name":"password","description":"<p>Password for Nexus</p>","type":[[["string"]]]},{"name":"secure","description":"<p>If Nexus has ssl</p>","default":false,"type":[[["boolean"]]]},{"name":"identifier","description":"<p>IDentifier for nexus</p>","type":[[["string"]]]},{"name":"retryAmount","description":"<p>Retry Amount</p>","optional":true,"type":[[["number"]]]},{"name":"retryDelay","description":"<p>Retry Delay</p>","optional":true,"type":[[["number"]]]},{"name":"requestTimeout","description":"<p>Request Timeout</p>","optional":true,"type":[[["number"]]]},{"name":"pingInterval","description":"<p>The ping interval to send pings to the gateway if needed.</p>","optional":true,"type":[[["number"]]]}],"meta":{"line":379,"file":"Node.ts","path":"src/structures"}},{"name":"PlayerOptions","type":[[["Object"]]],"params":[{"name":"guild","description":"<p>ID of the guild</p>","type":[[["Snowflake"]]]},{"name":"textChannel","description":"<p>ID of text channel</p>","type":[[["Snowflake"]]]},{"name":"voiceChannel","description":"<p>ID of voice channel</p>","type":[[["Snowflake"]]]},{"name":"volume","description":"<p>Initial volume</p>","optional":true,"type":[[["number"]]]}],"meta":{"line":251,"file":"Player.ts","path":"src/structures"}},{"name":"Filters","description":"<p>The available audio filters</p>","type":[[["string"]]],"props":[{"name":"bassboost","description":"<p>The bassboost filter</p>","type":[[["string"]]]},{"name":"8D","description":"<p>The 8D filter</p>","type":[[["string"]]]},{"name":"vaporwave","description":"<p>The vaporwave filter</p>","type":[[["string"]]]},{"name":"nightcore","description":"<p>The nightcore filter</p>","type":[[["string"]]]},{"name":"phaser","description":"<p>The phaser filter</p>","type":[[["string"]]]},{"name":"tremolo","description":"<p>The tremolo filter</p>","type":[[["string"]]]},{"name":"vibrato","description":"<p>The vibrato filter</p>","type":[[["string"]]]},{"name":"reverse","description":"<p>The reverse filter</p>","type":[[["string"]]]},{"name":"treble","description":"<p>The treble filter</p>","type":[[["string"]]]},{"name":"normalizer","description":"<p>The normalizer filter</p>","type":[[["string"]]]},{"name":"surrounding","description":"<p>The surrounding filter</p>","type":[[["string"]]]},{"name":"pulsator","description":"<p>The pulsator filter</p>","type":[[["string"]]]},{"name":"subboost","description":"<p>The subboost filter</p>","type":[[["string"]]]},{"name":"karaoke","description":"<p>The karaoke filter</p>","type":[[["string"]]]},{"name":"flanger","description":"<p>The flanger filter</p>","type":[[["string"]]]},{"name":"gate","description":"<p>The gate filter</p>","type":[[["string"]]]},{"name":"haas","description":"<p>The haas filter</p>","type":[[["string"]]]},{"name":"mcompand","description":"<p>The mcompand filter</p>","type":[[["string"]]]},{"name":"mono","description":"<p>The mono filter</p>","type":[[["string"]]]},{"name":"mstlr","description":"<p>The mstlr filter</p>","type":[[["string"]]]},{"name":"mstrr","description":"<p>The mstrr filter</p>","type":[[["string"]]]},{"name":"chorus","description":"<p>The chorus filter</p>","type":[[["string"]]]},{"name":"chorus2d","description":"<p>The chorus2d filter</p>","type":[[["string"]]]},{"name":"chorus3d","description":"<p>The chorus3d filter</p>","type":[[["string"]]]},{"name":"fadein","description":"<p>The fadein filter</p>","type":[[["string"]]]},{"name":"compressor","description":"<p>The compressor filter</p>","type":[[["string"]]]},{"name":"expander","description":"<p>The expander filter</p>","type":[[["string"]]]},{"name":"softlimiter","description":"<p>The softlimiter filter</p>","type":[[["string"]]]}],"meta":{"line":259,"file":"Player.ts","path":"src/structures"}}],"externals":[]}