{"meta":{"generator":"0.9.0","format":20,"date":1626512608354},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://chirojs.openian.dev\"><img src=\"https://menhera-chan.in/img/Chiro.JS.svg\" width=\"546\" alt=\"discord.js\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://menhera-chan.in/support\"><img src=\"https://img.shields.io/discord/735899211677041099?color=5865F2&logo=discord&logoColor=white\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/chiro.js\"><img src=\"https://img.shields.io/npm/v/chiro.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/chiro.js\"><img src=\"https://img.shields.io/npm/dt/chiro.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://www.patreon.com/rohank05\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n</div>\n\n## About\n\nChiro.js is a powerful [Node.js](https://nodejs.org) module that allows you to easily interact with the\n[Nexus](https://github.com/DevSnowflake/Nexus). Chiro.js is highly inspired from [Erela.JS](https://github.com/MenuDocs/erela.js) which is a module for lavalink.\n\n\n## Installation\n\n**Node.js 14.0.0 or newer is required.**  \n\n```sh-session\nnpm install chiro.js\n```\n\n## Example usage\n\n```js\nconst { Client } = require(\"discord.js\");\nconst { Manager } = require(\"chiro.js\");\nconst client = new Client();\nconst manager = new Manager({    \n    nodes:      \n        {\n            host: \"localhost\",\n            port: 3000,\n            password: \"mostsecurepassword\",\n        },\n    send(id, payload) {\n        const guild = client.guilds.cache.get(id);\n        if (guild) guild.shard.send(payload);\n    },\n}).on(\"trackStart\", (player, track) => {\n    console.log(`${track.title} has started`);\n});\n\nclient.on(\"ready\", () => {\n    console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on(\"messageCreate\", async (message) => {\n    if (message.content === \"play\") {\n        const player = manager.create({\n            guild: message.guild.id,\n            textChannel: message.channel.id,\n            voiceChannel: message.member.voice.channel.id,\n        });\n        const res = await player.send({\n            query: \"play that funky music\",\n        });\n\n        player.queue.add(res.tracks[0]);\n        player.play();\n    }\n});\n\nclient.on('raw', (d)=>{\n    manager.updateVoiceState(d);\n})\n\nclient.login(\"token\");\n```\n\n## Links\n\n- [Website](https://chirojs.openian.dev/)\n- [Documentation](https://chirojs.openian.dev/)\n- [Discord server](https://menhera-chan.in/support)\n- [Nexus Discord server](https://discord.gg/snowflakedev)\n- [GitHub](https://github.com/OpenianDevelopment/chiro.js)\n- [NPM](https://www.npmjs.com/package/chiro.js)\n\n\n## Help\n\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle\nnudge in the right direction, please don't hesitate to join our official [Chiro.js Server](https://menhera-chan.in/support).\n\n## Notice\nThe documentation is WIP. This is just a temporary docs","path":"README.md"}}}},"classes":[{"name":"Manager","description":"<p>The Manager Class</p>","extends":[[["EventEmitter"]]],"construct":{"name":"Manager","description":"<p>Creates new Manager Instance</p>","params":[{"name":"options","description":"<p>Manager Options</p>","type":[[["ManagerOptions"]]]}]},"props":[{"name":"players","description":"<p>The Collection of Players in this Manager</p>","type":[[["Collection","<"],["Snowflake",", "],["Player",">"]]],"meta":{"line":21,"file":"Manager.ts","path":"src/structures"}},{"name":"initiated","description":"<p>If Manager Class initiated or not</p>","access":"private","type":[[["boolean"]]],"meta":{"line":36,"file":"Manager.ts","path":"src/structures"}}],"methods":[{"name":"init","description":"<p>Init Manager</p>","examples":["manager.init(client.user.id);"],"params":[{"name":"clientId","description":"<p>Bot Application ID</p>","type":[[["Snowflake"]]]}],"returns":[[["Manager"]]],"meta":{"line":75,"file":"Manager.ts","path":"src/structures"}},{"name":"search","description":"<p>Searching or Getting YouTube songs and playlist</p>","params":[{"name":"SearchQuery","description":"<p>Query Object</p>","type":[[["SearchQuery"]]]},{"name":"requester","description":"<p>User Object</p>","type":[[["User"]]]}],"returns":[[["SearchResult"]]],"meta":{"line":90,"file":"Manager.ts","path":"src/structures"}},{"name":"resolveTrackData","description":"<p>Internal Method to Resolve Search Result from nexus into Interface SearchResult</p>","access":"private","params":[{"name":"res","description":"<p>search result</p>","type":[[["Object"]]]},{"name":"requester","description":"<p>user who searched</p>","type":[[["User"]]]}],"returns":[[["SearchResult"]]],"meta":{"line":124,"file":"Manager.ts","path":"src/structures"}},{"name":"buildTrackData","description":"<p>Internal method to encapsulate Track Data received from Nexus into {TrackData}</p>","access":"private","params":[{"name":"data","description":"<p>The Track details received from Nexus</p>","type":[[["TrackData"]]]},{"name":"requester","description":"<p>The person who requested it</p>","type":[[["User"]]]}],"returns":[[["TrackData"]]],"meta":{"line":167,"file":"Manager.ts","path":"src/structures"}},{"name":"create","description":"<p>Creates a player instance and add it to players collection</p>","params":[{"name":"options","description":"<p>Player Options</p>","type":[[["PlayerOptions"]]]}],"returns":[[["Player"]]],"meta":{"line":190,"file":"Manager.ts","path":"src/structures"}},{"name":"get","description":"<p>Send Player</p>","params":[{"name":"guild","description":"<p>Id of Guild</p>","type":[[["Snowflake"]]]}],"returns":[[["Player"]]],"meta":{"line":203,"file":"Manager.ts","path":"src/structures"}},{"name":"destroyNode","description":"<p>Destroy the Node connection</p>","meta":{"line":211,"file":"Manager.ts","path":"src/structures"}},{"name":"updateVoiceState","description":"<p>Send Voice State Payload Received from Discord API to Nexus</p>","examples":["client.on('raw', (d)=>{\n   manager.updateVoiceState(d);\n});"],"params":[{"name":"data","type":[[["Object"]]]}],"meta":{"line":217,"file":"Manager.ts","path":"src/structures"}}],"events":[{"name":"nodeConnect","description":"<p>Emitted when node connection is established</p>","params":[{"name":"node","type":[[["Node"]]]}],"meta":{"line":242,"file":"Manager.ts","path":"src/structures"}},{"name":"nodeDisconnect","description":"<p>Emitted when node connection is diconnected</p>","params":[{"name":"node","type":[[["Node"]]]}],"meta":{"line":248,"file":"Manager.ts","path":"src/structures"}},{"name":"nodeError","description":"<p>Emitted when node connection errors</p>","params":[{"name":"node","type":[[["Node"]]]}],"meta":{"line":254,"file":"Manager.ts","path":"src/structures"}},{"name":"ready","description":"<p>Emitted when Nexus is Ready to play</p>","meta":{"line":260,"file":"Manager.ts","path":"src/structures"}},{"name":"trackADD","description":"<p>Emitted when track is added to the queue</p>","params":[{"name":"player","type":[[["Player"]]]},{"name":"Track","type":[[["TrackData"]]]}],"meta":{"line":265,"file":"Manager.ts","path":"src/structures"}},{"name":"tracksADD","description":"<p>Emitted when tracks is added to the queue</p>","params":[{"name":"player","type":[[["Player"]]]},{"name":"Tracks","type":[[["Array","<"],["TrackData",">"]]]}],"meta":{"line":272,"file":"Manager.ts","path":"src/structures"}},{"name":"trackStart","description":"<p>Emitted when track is start playing</p>","params":[{"name":"player","type":[[["Player"]]]},{"name":"Track","type":[[["TrackData"]]]}],"meta":{"line":279,"file":"Manager.ts","path":"src/structures"}},{"name":"trackEnd","description":"<p>Emitted when track is ends</p>","params":[{"name":"player","type":[[["Player"]]]},{"name":"Track","type":[[["TrackData"]]]}],"meta":{"line":286,"file":"Manager.ts","path":"src/structures"}},{"name":"trackError","description":"<p>Emitted when track errors</p>","params":[{"name":"player","type":[[["Player"]]]},{"name":"Track","type":[[["TrackData"]]]}],"meta":{"line":293,"file":"Manager.ts","path":"src/structures"}},{"name":"queueEnd","description":"<p>Emitted when Queue ends</p>","params":[{"name":"player","type":[[["Player"]]]},{"name":"payload","type":[[["Payload"]]]}],"meta":{"line":300,"file":"Manager.ts","path":"src/structures"}},{"name":"voiceReady","description":"<p>Emitted when Voice Connection is Ready</p>","params":[{"name":"payload","type":[[["Payload"]]]}],"meta":{"line":307,"file":"Manager.ts","path":"src/structures"}},{"name":"voiceDisconnect","description":"<p>Emitted when Voice Connection is disconnected</p>","params":[{"name":"payload","type":[[["Payload"]]]}],"meta":{"line":313,"file":"Manager.ts","path":"src/structures"}},{"name":"voiceError","description":"<p>Emitted when Voice Connection error</p>","params":[{"name":"payload","type":[[["Payload"]]]}],"meta":{"line":319,"file":"Manager.ts","path":"src/structures"}},{"name":"audioPlayerError","description":"<p>Emitted when Audio Player Errors</p>","params":[{"name":"payload","type":[[["Payload"]]]}],"meta":{"line":325,"file":"Manager.ts","path":"src/structures"}}],"meta":{"line":15,"file":"Manager.ts","path":"src/structures"}},{"name":"Node","description":"<p>The Node Class</p>","meta":{"line":9,"file":"Node.ts","path":"src/structures"}},{"name":"Player","description":"<p>The Player Class</p>","meta":{"line":8,"file":"Player.ts","path":"src/structures"}},{"name":"Queue","description":"<p>The Queue Class</p>","meta":{"line":3,"file":"Queue.ts","path":"src/structures"}}],"interfaces":[],"typedefs":[],"externals":[]}